/**
 * @fileOverview This file provides for posting new links generated by the
 * extension to a host page.
 *
 * Posting Process:
 *
 * 1. The user selects an editable element with a right click
 * 2. The user clicks a Privly posting application in the resultant context
 *    menu.
 * 3. This script records the host page the link will be posted to
 * 4. The script opens a posting window and records its ID
 * 5. The posting application will complete and send this script
 *    a message with the Privly URL
 * 6. The script sends the host page's content script,
 *    post_new_link.js, the URL
 */

/*global chrome:false, ls:true, notification:true */

/**
 * @namespace Functionality for posting new links to pages.
 */
var postingProcess = {

  /**
   * The secret that should be included in messages to the application.
   */
  messageSecret: null,

  /**
   * Receives the secret message from the privly-application so
   * it can send messages in the future with the secret token.
   * Otherwise the applications will not trust the origin of the
   * messages.
   *
   * @param {object} request The request object's JSON document.
   * The request object should contain the privlyUrl.
   * @param {object} sender Information on the sending posting application
   * @param {function} sendResponse The callback function for replying to message
   *
   * @return {null} The function does not return anything, but it does call the
   * response function.
   */
  initializeMessagePathway: function(request, sender, sendResponse) {

    if (request.handler === "messageSecret" &&
                 sender.tab.url.indexOf("chrome-extension://") === 0) {
      postingProcess.messageSecret = request.data;
      sendResponse({secret: postingProcess.messageSecret,
                    handler: "messageSecret"});
    } else if (request.handler === "initialContent" &&
               sender.tab.id === postingProcess.postingApplicationTabId) {
      sendResponse({secret: postingProcess.messageSecret, initialContent:
                    postingProcess.postingApplicationStartingValue, handler: "initialContent"});
    }
  },

  /**
   * Send the privly-application the initial content, if there is any.
   *
   * @param {object} request The request object's JSON document.
   * The request object should contain the privlyUrl.
   * @param {object} sender Information on the sending posting application
   * @param {function} sendResponse The callback function for replying to message
   *
   * @return {null} The function does not return anything, but it does call the
   * response function.
   */
  sendInitialContent: function(request, sender, sendResponse) {

    if (request.handler === "initialContent" &&
               sender.tab.id === postingProcess.postingApplicationTabId) {
      sendResponse({secret: postingProcess.messageSecret, initialContent:
                    postingProcess.postingApplicationStartingValue, handler: "initialContent"});
    } else if(request.handler === "initialContent") {
      sendResponse({secret: postingProcess.messageSecret, initialContent: "",
        handler: "initialContent"});
    }
  },

  // Remembers where the PrivlyUrl will be placed based on the context menu
  postingResultTab: undefined,
  postingApplicationTabId: undefined,
  postingApplicationStartingValue: ""

};

// Creates the Message context menu
chrome.contextMenus.create({
  "title": "New Message",
  "contexts": ["editable"],
  "onclick" : function(info, tab) {
    chrome.tabs.sendMessage(tab.id, {
      action: 'posting/on_context_menu_clicked',
      frameUrl: info.frameUrl
    });
  }
});

// Initialize message listeners
chrome.extension.onMessage.addListener(postingProcess.initializeMessagePathway);
chrome.extension.onMessage.addListener(postingProcess.sendInitialContent);

// Respond to the request sent from posting_button.js with the value from localStorage["Options:DissableButton"]
chrome.runtime.onMessage.addListener(
  function(request, sender, sendResponse) {
    if (request.ask === "PrivlyBtnStatus") {
      if( ls.getItem("Options:DissableButton") === true ) {
        sendResponse({tell: "checked"});
      } else {
        sendResponse({tell: "unchecked"});
      }
    }
  });
